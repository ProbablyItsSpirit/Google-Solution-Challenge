Ensure that the files are automatically categorized and stored in an organized manner. The file types and storage logic should be as follows:
Question Paper (QP): Stored in a /question_papers directory.
Answer Sheet (AP): Stored in a /answer_sheets directory.
Solution Set (SP) or Book: Stored in a /solutions directory.
Grading Reports: Stored in a /reports directory.
Ensure that the system extracts key metadata from the documents, such as student name, roll number, exam name or paper title, and date. This will help in saving and identifying each answer sheet.
Implement the functionality to identify incorrect or incomplete answers, highlight mistakes with color-coded tags, and display the correct/better answer with a small hovering reference link to the relevant solution in the uploaded book or solution set.
Ensure that the AI retrieves the relevant passage from the solution set or book using RAG (FAISS) and displays a hovering link next to the AI-generated correction. When the teacher hovers over the link, it should show a small snippet of the correct passage and the exact page number or paragraph where the correct answer is found.
Implement the functionality to automatically generate meaningful chat names for each session, similar to ChatGPT. This will make it easier for users to identify and search for previous grading sessions. The chat history should be automatically organized, searchable, and display file links to the uploaded QP, AP, or SP.
Ensure that the user experience flow is seamless, including the upload flow, grading flow, and chat history flow. The AI should automatically extract and save metadata, segregate files into their appropriate directories, process the AP and generate grades, retrieve correct answers from SP if available, highlight incorrect answers, and display hovering reference links with book page references.
Consider implementing advanced features such as file versioning, bookmarks and notes, exportable reports, and improved search for specific answers or explanations from previous sessions.
Get theme and design and position of elements idea from client-test
To get the theme, design, and position of elements idea from 
client-test
, you can refer to the following points:

The 
client-test/src/App.tsx
 file provides a comprehensive layout and design for the application. It includes a dark mode toggle, a collapsible sidebar, a classroom overlay, and a chat area with file upload functionality.
The 
client-test/src/index.css
 file contains the base styles and utility classes used throughout the application. It imports Tailwind CSS for styling.
The 
client-test/src/main.tsx
 file initializes the React application and renders the App component.
The 
client-test/tailwind.config.js
 file configures Tailwind CSS for the project, specifying the content paths and theme extensions.
The 
client-test/index.html
 file sets up the basic HTML structure for the application, including the root div where the React app is mounted.
These files provide a good starting point for understanding the theme, design, and positioning of elements in the 
client-test
 application. You can use these ideas to implement similar features and styles in your 
client
 folder.

Implement the design ideas to the client folder and everything add those special options to be able to use settings and accessibility features and the dark and light mode thing
To implement the design ideas from 
client-test
 to the 
client
 folder and add special options for settings, accessibility features, and dark/light mode, follow these steps:

Copy the theme, design, and position of elements from 
client-test/src/App.tsx
 to 
client/src/App.jsx
.
Ensure the dark mode toggle is implemented by copying the relevant code from 
client-test/src/App.tsx
 to 
client/src/App.jsx
.
Add the accessibility menu with text size adjustment and text-to-speech options from 
client-test/src/App.tsx
 to 
client/src/App.jsx
.
Implement the collapsible sidebar and classroom overlay from 
client-test/src/App.tsx
 to 
client/src/App.jsx
.
Ensure the chat area with file upload functionality is implemented by copying the relevant code from 
client-test/src/App.tsx
 to 
client/src/App.jsx
.
Update the 
client/src/index.css
 file to include the base styles and utility classes from 
client-test/src/index.css
.
Ensure the Tailwind CSS configuration in 
client/tailwind.config.js
 matches the configuration in 
client-test/tailwind.config.js
.
Update the 
client/index.html
 file to include the necessary script tags and root div as in 
client-test/index.html
.
Ensure the 
client/src/main.jsx
 file initializes the React application and renders the App component as in 
client-test/src/main.tsx
.
By following these steps, you will successfully implement the design ideas, settings, accessibility features, and dark/light mode in the 
client
 folder.

How should the user roles be assigned?
To assign user roles in the system, follow these steps:

In the backend, ensure that the User data model in 
backend/auth.py
 includes a role attribute, which can be either "teacher" or "student".
In the frontend, during the login process in 
client/src/pages/Login.jsx
, prompt the user to select their role (teacher or student) before proceeding with the authentication.
When handling Google sign-in in the handleGoogleSignIn function in 
client/src/pages/Login.jsx
, check if the user already exists in Firestore. If the user exists, verify that the role matches the selected role. If the user does not exist, create a new user document in Firestore with the selected role.
During the login process, ensure that the user role is stored in Firestore and included in the user data returned to the frontend.
In the backend, use the login_user endpoint in 
backend/auth.py
 to handle Google login/signup and store user information, including the role, in Firestore.
In the frontend, after successful login, navigate the user to the appropriate dashboard based on their role (teacher or student) using the navigate function in 
client/src/pages/Login.jsx
.